package it.polimi.ingsw.network.server;

import it.polimi.ingsw.ConstantValues;
import it.polimi.ingsw.controller.ClientController;
import it.polimi.ingsw.controller.GameListener;
import it.polimi.ingsw.network.messages.Pong;
import it.polimi.ingsw.network.messages.ServerToClientMessage;

import java.io.IOException;
import java.rmi.NoSuchObjectException;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.LinkedList;
import java.util.concurrent.TimeUnit;

public class ClientHandlerRmi extends ClientHandler {

    private final ClientController clientController;
    private final GameListener gameListener;
    private final LinkedList<ServerToClientMessage> messageQueue = new LinkedList<>();
    private boolean connectionActive = true;
    private boolean receivedPong = false;

    protected ClientHandlerRmi(ClientController clientController, GameListener gameListener) throws RemoteException {
        this.clientController = clientController;
        this.gameListener = gameListener;
    }

    /**
     * The client handler is notified of a ping reception and sends a Pong as a response
     */
    @Override
    public void pingWasReceived() {
        try {
            sendMessage(new Pong());
        } catch (IOException e) {
            System.err.println("IOException while sending Pong: " + e.getMessage());
            stopConnection();
        }
    }

    /**
     * Sends a message to the client
     *
     * @param mes is the message generated by the controller
     */
    @Override
    public void sendMessage(ServerToClientMessage mes) throws RemoteException {
        clientController.handle(mes);
    }

    /**
     * Method used to read incoming messages, runs indefinitely as a thread until the connection is closed.
     */
    @Override
    public void receiveMessage() {
        // No implementation needed, messages are received via RMI calls
    }

    /**
     * Runs indefinitely as a thread to pass messages onto the client and handle them until the connection is closed.
     */
    @Override
    public void passMessage() {
        while (connectionActive) {
            synchronized (messageQueue) {
                if (!messageQueue.isEmpty()) {
                    ServerToClientMessage message = messageQueue.pop();
                    clientController.handle(message);
                }
            }
        }
    }

    /**
     * Ends the connection between the server and this client handler
     */
    public void stopConnection() {
        connectionActive = false;
        try {
            UnicastRemoteObject.unexportObject((Remote) clientController, true);
        } catch (NoSuchObjectException e) {
            System.out.println("Error while unexporting the remote object: " + e.getMessage());
        }
    }

    /**
     * Sends a message to the client
     */
    public synchronized void sendToClient(ServerToClientMessage message) throws RemoteException {
        clientController.handle(message);
    }

    /**
     * The listener who has been passed a pong will notify the connection
     */
    public void pongWasReceived() {
        receivedPong = true;
    }

    /**
     * Every timeout period checks if a Pong has been received.
     * If a Pong has not been received for enough time then the connection will be closed
     */
    public void checkConnectionStatus() {
        while (connectionActive) {
            try {
                for (int i = 0; i < ConstantValues.connectionTimeout_seconds; i++) {
                    TimeUnit.SECONDS.sleep(1);
                }
            } catch (InterruptedException e) {
                System.err.println("InterruptedException while waiting for a Pong");
                throw new RuntimeException(e);
            }

            if (!receivedPong) {
                this.stopConnection();
            } else {
                receivedPong = false;
            }
        }
    }
}