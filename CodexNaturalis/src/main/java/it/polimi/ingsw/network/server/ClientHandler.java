package it.polimi.ingsw.network.server;

import it.polimi.ingsw.controller.GameController;
import it.polimi.ingsw.controller.ServerSideMessageListener;
import it.polimi.ingsw.ConstantValues;
import it.polimi.ingsw.network.messages.ClientToServerMessage;
import it.polimi.ingsw.network.messages.Message;
import it.polimi.ingsw.network.messages.Pong;
import it.polimi.ingsw.network.messages.ServerToClientMessage;
import it.polimi.ingsw.network.messages.serverToClient.GenericMessage;


import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.rmi.RemoteException;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.TimeUnit;

import static it.polimi.ingsw.ConstantValues.maxMessagesInQueue;

public abstract class ClientHandler extends Thread {
    /**
     * Receive messages by client to server
     */
    public abstract void receiveMessage();

    /**
     * Sends messages by client to server
     */
    public abstract void passMessage();

    /**
     * Interrupt the thread
     */
    public void interruptSelf() {
        this.interrupt();
    }
    /**
     * Sends a message to the client
     *
     * @param mes is the message generated by the controller
     */
    public abstract void sendMessage(ServerToClientMessage mes) throws IOException, RemoteException;

    /**
     * The client handler is notified of a ping reception and sends a Pong as a response
     */
    public abstract void pingWasReceived();

    /**
     * Every timeout period
     */
    public abstract void checkConnectionStatus();

    /**
     * Ends the connection between client and server
     */
    public abstract void stopConnection();
}