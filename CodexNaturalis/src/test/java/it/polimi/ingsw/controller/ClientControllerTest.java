package it.polimi.ingsw.controller;

import it.polimi.ingsw.controller.userCommands.*;
import it.polimi.ingsw.model.enums.CardType;
import it.polimi.ingsw.model.enums.TokenType;
import it.polimi.ingsw.ConstantValues;
import it.polimi.ingsw.network.messages.PlayerPlacedCardInformation;
import it.polimi.ingsw.network.messages.serverToClient.*;
import it.polimi.ingsw.view.ImmutableScoreTrack;
import org.junit.Test;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.TimeUnit;

import static org.junit.Assert.fail;

public class ClientControllerTest {
    ClientController controller = null;
    ServerSocket serverStub;

    /**
     * This test sets up a server stub that sends messages to the controller.
     * It's used to test whether the connection happens successfully after a joinLobbyCommand
     */
    @Test
    public void testConnectionPhase() {
        controller = ClientController.getInstance();
        new Thread(() -> {
            try {
                serverStubSetUp();
            } catch (IOException | InterruptedException e) {
                fail();
            }
        }).start();
        controller.receiveCommand(new JoinLobbyCommand(1234, "localhost"));
        try {
            //Waits enough time to receive all messages
            TimeUnit.MILLISECONDS.sleep(300);
        } catch (InterruptedException e) {
            fail();
        }
        controller.receiveCommand(new EndGameCommand());
    }

    private void serverStubSetUp() throws IOException, InterruptedException {
        //Sets up data to be sent
        ArrayList<String> testPlayers = new ArrayList<>();
        testPlayers.add("test1");
        testPlayers.add("test2");
        testPlayers.add("test3 LOOOOOONG WORD");
        testPlayers.add("test4           ");

        List<Integer> playerHand = new ArrayList<>();
        playerHand.add(3);
        playerHand.add(4);
        playerHand.add(50);
        //Used as default values for a player's visible symbols in this test
        HashMap<TokenType, Integer> testVisibleSymbols = new HashMap<>();
        testVisibleSymbols.put(TokenType.fungi, 1);
        testVisibleSymbols.put(TokenType.animal, 1);
        testVisibleSymbols.put(TokenType.plant, 1);
        testVisibleSymbols.put(TokenType.scroll, 1);
        testVisibleSymbols.put(TokenType.insect, 1);
        testVisibleSymbols.put(TokenType.quill, 1);
        testVisibleSymbols.put(TokenType.ink, 1);


        serverStub = new ServerSocket(1234);
        Socket connection = null;
        while (connection == null) {
            connection = serverStub.accept();
        }
        System.out.println("Connection accepted");
        ObjectOutputStream out = new ObjectOutputStream(connection.getOutputStream());

        out.writeObject(new LobbyFoundMessage());

        out.writeObject(new GameStartingMessage(testPlayers, 82, playerHand, generateSharedFieldMes(testPlayers), 90, 100));
        out.writeObject(new PlayerCantPlayAnymoreMessage());
        out.close();
        connection.close();
        serverStub.close();
    }

    /**
     * Generates a message with default values not important to the test
     */
    private static SharedFieldUpdateMessage generateSharedFieldMes(ArrayList<String> testPlayers) {
        HashMap<String, Integer> tempScoreTrack = new HashMap<>();
        HashMap<String, String> colours = new HashMap<>();
        colours.put(testPlayers.get(0), ConstantValues.ansiBlue);
        colours.put(testPlayers.get(1), ConstantValues.ansiRed);
        colours.put(testPlayers.get(2), ConstantValues.ansiGreen);
        colours.put(testPlayers.get(3), ConstantValues.ansiYellow);
        tempScoreTrack.put(testPlayers.get(0), 0);
        tempScoreTrack.put(testPlayers.get(1), 2);
        tempScoreTrack.put(testPlayers.get(2), 4);
        tempScoreTrack.put(testPlayers.get(3), 0);
        List<Integer> initialCards = new ArrayList<>();
        initialCards.add(1);
        initialCards.add(12);
        initialCards.add(61);
        initialCards.add(72);
        //Message used as a default value in this test
        return new SharedFieldUpdateMessage(new ImmutableScoreTrack(tempScoreTrack, colours), CardType.animal, CardType.fungi, initialCards);
    }

    /**
     * In this test we do not initialize a connection, we simply catch the NullPointerExceptions that are generated by the controller
     * that tries to send messages with a Socket that cannot be initialized.<br>
     * This test is not meant to test the correctness of the network; it's meant to test the correct handling of messages and commands.
     */
    @Test
    public void testMessagesAndCommands() {
        controller= ClientController.getInstance();
        controller.handle(new LobbyFoundMessage());
        //Tests the choosing name phase
        sendMessagesToNonExistentSocket(controller,new NameCommand("s"));
        controller.handle(new NameNotAvailableMessage());
        sendMessagesToNonExistentSocket(controller,new NameCommand("test"));
        controller.handle(new NameChosenSuccessfullyMessage());
        //Tests that the command is refused
        sendMessagesToNonExistentSocket(controller,new NameCommand("eihfo"));
        //Tests that commands related to showing the board are refused before the game has started
        sendMessagesToNonExistentSocket(controller, new AvailablePositionCommand());
        sendMessagesToNonExistentSocket(controller, new ShowFieldCommand());
        sendMessagesToNonExistentSocket(controller, new ShowHandCommand());
        sendMessagesToNonExistentSocket(controller, new ShowObjectivesCommand());
        sendMessagesToNonExistentSocket(controller, new ShowCommonFieldCommand());
        sendMessagesToNonExistentSocket(controller, new ShowOtherFieldCommand("opponent"));
        //Tests that the player can correctly insert the number of players, but they can't choose it twice in a row
        controller.handle(new ChooseHowManyPlayersMessage());
        sendMessagesToNonExistentSocket(controller, new NumberOfPlayerCommand(1));
        sendMessagesToNonExistentSocket(controller, new NumberOfPlayerCommand(5));
        sendMessagesToNonExistentSocket(controller, new NumberOfPlayerCommand(3));
        sendMessagesToNonExistentSocket(controller, new NumberOfPlayerCommand(2));
    }

    /**
     * This method catches exceptions generated by the controller that tries to send messages without being connected.
     */
    private void sendMessagesToNonExistentSocket(UserListener l, UserCommand c){
        try {
            c.sendCommand(l);
        }catch (NullPointerException e){
            return;
        }
    }
}